on:  # Specifies the event triggering the workflow
  workflow_call:  # Indicates that this is a reusable workflow

######################################### SECTION 2 ################################################
# This section will create 4 types of Rubeus: Rubeus, InvisibilityCloakRubeus, ConfuserExRubeus, InvisibilityCloakConfuserExRubeus
jobs:
    cleanRubeus:
       runs-on: Windows10
       steps:
# -------------------- Build clean Rubeus --------------------
        - name: Checkout Rubeus
          if: "${{ github.event.inputs.invisibilitycloak == 'false' && github.event.inputs.confuserEx == 'false' }}"
          uses: actions/checkout@v2
          with:
            repository: rsecurity12/Rubeus

        - name: Set up .NET 7
          if: "${{ github.event.inputs.invisibilitycloak == 'false' && github.event.inputs.confuserEx == 'false' }}"
          uses: actions/setup-dotnet@v2
          with:
            dotnet-version: '7.0.101'  ## USE DOTNET 4 to build

#        - name: Enable execution policy
#          run: |
#            PowerShell.exe -ExecutionPolicy Bypass -Command "Set-ExecutionPolicy -Scope Process Bypass"



#        - name: Install .NET framework 4.0
#          run: |
#            $url = "https://microsoft.com/en-US/Download/confirmation.aspx?id=17718"
#            $output = "$env:TEMP\dotNetFx40_Full_x86_x64.exe"
#            Invoke-WebRequest -Uri $url -OutFile $output
#            Start-Process -FilePath $output -ArgumentList "/q" -Wait

        - name: Build
          run: |
            dotnet build --configuration Release

        - name: Rename Executable
          run: |
            ren "${{ github.event.inputs.projectdir }}\\Rubeus\\bin\\Release\\Rubeus.exe" "${{ github.event.inputs.toolname }}.exe"

        - name: Upload Artifacts
          uses: actions/upload-artifact@v2
          with:
            name: cleanRubeus-artifacts
            path: "${{ github.event.inputs.projectdir }}\\Rubeus\\bin\\Release\\${{ github.event.inputs.toolname }}.exe"


# -------------------- Build invisibilityCloak Rubeus -------------------
    invisibilityCloakRubeus:
       runs-on: windows-2019
       steps:
        - name: Checkout InvisibilityCloak
          if: "${{ github.event.inputs.invisibilitycloak == 'true' && github.event.inputs.confuserEx == 'false' }}"
          uses: actions/checkout@v2
          with:
            repository: rsecurity12/InvisibilityCloak

        - name: Upload Artifacts
          if: "${{ github.event.inputs.invisibilitycloak == 'true' && github.event.inputs.confuserEx == 'false' }}"
          uses: actions/upload-artifact@v2
          with:
            name: invisibilitycloak-artifacts
            path: "${{ github.event.inputs.projectdir }}\\InvisibilityCloak.py"

        - name: Checkout Rubeus
          if: "${{ github.event.inputs.invisibilitycloak == 'true' && github.event.inputs.confuserEx == 'false' }}"
          uses: actions/checkout@v2
          with:
            repository: rsecurity12/Rubeus

        - name: Set up .NET 7
          if: "${{ github.event.inputs.invisibilitycloak == 'true' && github.event.inputs.confuserEx == 'false' }}"
          uses: actions/setup-dotnet@v2
          with:
            dotnet-version: '7.0.101'  ## USE DOTNET 4 to build

        - name: Check installed packages
          run: |
            Get-WindowsFeature -Name *NET-Framework*

        - name: Download Artifacts
          uses: actions/download-artifact@v2
          with:
            name: invisibilitycloak-artifacts

        - name: Set up Python
          uses: actions/setup-python@v2
          with:
            python-version: 3.11  
        
        - name: Run InvisibilityCloak
          run: |                                                     
            python "${{ github.event.inputs.projectdir }}\\InvisibilityCloak.py" -d "${{ github.event.inputs.projectdir }}" -n "${{ github.event.inputs.toolname }}" -m  "${{ github.event.inputs.invisibilityCloak_encodingMethod }}"

        - name: Check Dotnet Info
          run: |
            dotnet --info

        - name: Build
          if: "${{ github.event.inputs.invisibilitycloak == 'true' && github.event.inputs.confuserEx == 'false' }}"
          run: |
            dotnet --info &&
            dotnet build --configuration Release

        - name: Upload Artifacts
          uses: actions/upload-artifact@v2
          with:
            name: invisibilityCloakRubeus-artifacts
            path: "${{ github.event.inputs.projectdir }}\\${{ github.event.inputs.toolname }}\\obj\\Release\\${{ github.event.inputs.toolname }}.exe"


# -------------------- Build ConfuserEx Rubeus -------------------- 
    ConfuserExRubeus:
       runs-on: windows-2019
       steps:
       - name: Checkout Rubeus
         if: "${{ github.event.inputs.invisibilitycloak == 'false' && github.event.inputs.confuserEx == 'true' }}"
         uses: actions/checkout@v2
         with:
            repository: rsecurity12/Rubeus

       - name: Set up .NET 7
         if: "${{ github.event.inputs.invisibilitycloak == 'false' && github.event.inputs.confuserEx == 'true' }}"
         uses: actions/setup-dotnet@v2
         with:
           dotnet-version: '7.0.101'

       - name: Build
         run: |
           dotnet build --configuration Release

       - name: Upload Artifacts
         uses: actions/upload-artifact@v2
         with:
           name: rubeus-artifacts
           path: "${{ github.event.inputs.projectdir }}\\Rubeus\\bin\\Release\\Rubeus.exe"
    
       - name: Checkout ConfuserEx
         uses: actions/checkout@v2
         with:
           repository: rsecurity12/ConfuserEx

       - name: Download Artifacts
         uses: actions/download-artifact@v2
         with:
           name: rubeus-artifacts
         
       - name: Create a .crproj file             # You can alter the .crproj file to meet your requirements
         run: |
          $xml = @'                                   
             <project outputDir="${{ github.event.inputs.projectdir }}\\Rubeus\\Confused" baseDir="${{ github.event.inputs.projectdir }}" xmlns="http://confuser.codeplex.com">
                <module path="Rubeus.exe">
                    <rule pattern="true" preset="maximum" inherit="false">
                      <protection id="anti debug" />
                      <protection id="anti dump" />
                      <protection id="anti ildasm" />
                      <protection id="anti tamper" />
                      <protection id="constants" />  
                      <protection id="ctrl flow" />
                      <protection id="harden" />
                      <protection id="invalid metadata" />
                      <protection id="ref proxy" />
                      <protection id="resources" />
                      <protection id="typescramble" />
                      <protection id="rename" />
                      <protection id="watermark" />
                  </rule>
                </module>
             </project>
          '@
          Add-Content -Path "project.crproj" -Value $xml -Encoding UTF8

       - name: Create ConfuserEXRubeus                 # -n flag means auto confirm 
         run:  "${{ github.event.inputs.projectdir }}\\Confuser.CLI.exe -n ${{ github.event.inputs.projectdir }}\\project.crproj"

       - name: Rename Executable
         run: |
            ren "${{ github.event.inputs.projectdir }}\\Rubeus\\Confused\\Rubeus.exe" "${{ github.event.inputs.toolname }}.exe"

       - name: Upload Artifacts
         uses: actions/upload-artifact@v2
         with:
            name: confuserExRubeus-artifacts
            path: "${{ github.event.inputs.projectdir }}\\Rubeus\\Confused\\${{ github.event.inputs.toolname }}.exe"


# -------------------- Create release -------------------
    upload-to-release:
      runs-on: ubuntu-latest 
      needs:
      - cleanRubeus
      - invisibilityCloakRubeus
      - ConfuserExRubeus
      if: always()  # This ensures the job always runs
      steps:

        - name: Checkout Rubeus
          uses: actions/checkout@v2
          with:
            repository: rsecurity12/Rubeus
      
        - name: Download cleanRubeus Artifacts
          uses: actions/download-artifact@v2
          with:
            name: cleanRubeus-artifacts
          continue-on-error: true

        - name: Download invisibilityCloakRubeus Artifacts
          uses: actions/download-artifact@v2
          with:
            name: invisibilityCloakRubeus-artifacts
          continue-on-error: true

        - name: Download confuserExRubeus Artifacts
          uses: actions/download-artifact@v2
          with:
            name: confuserExRubeus-artifacts
          continue-on-error: true

        - name: Create Stable Release (ignore step if already exists)
          if: "${{ github.event.inputs.Malware_release == 'Stable' }}"
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          run: |
            RELEASE_TAG="Stable"
            RELEASE_NAME="Stable-Versions"
            RELEASE_BODY=$(cat <<EOF
            
            **InvisibilityCloak**
            - Base64 encoded: Malwarev21
            - ROT13 encoded: Malwarev22
            - Reverse encoded: Malwarev23
            
            **ConfuserEx**
            - Malwarev3
            
            **InvisibilityCloak + ConfuserEx**
            - Base64 encoded: Malwarev41
            - ROT13 encoded: Malwarev42
            - Reverse encoded: Malwarev43
            EOF
            )
    
            assets_dir="/home/runner/work/Rubeus/Rubeus"
            exe_file=$(find "$assets_dir" -name "*.exe" -type f | head -n 1)
            
            if [ -n "$exe_file" ]; then
                gh release create "$RELEASE_TAG" \
                    --title "$RELEASE_NAME" \
                    --notes "$RELEASE_BODY" \
                    --generate-notes \
                    --latest \
                    "$exe_file"
            else
                echo "No .exe file found in the specified directory."
            fi
          continue-on-error: true

        - name: Upload to Stable release 
          if: "${{ github.event.inputs.Malware_release == 'Stable' }}"
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          run: |       
            RELEASE_TAG="Stable"                   
            assets_dir="/home/runner/work/Rubeus/Rubeus"
            exe_file=$(find "$assets_dir" -name "*.exe" -type f | head -n 1)
            
            if [ -n "$exe_file" ]; then
                gh release upload "$RELEASE_TAG" --clobber \
                    "$exe_file"
            else
                echo "No .exe file found in the specified directory."
            fi
          continue-on-error: true
          
        - name: Create Beta Release (ignore step if already exists)
          if: "${{ github.event.inputs.Malware_release == 'Beta' }}"
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          run: |       
            RELEASE_TAG="Beta"
            RELEASE_NAME="Malware-Library"
            RELEASE_BODY=$(cat <<EOF
            
            **Clean Malware**
            - Malwarev1
            
            **InvisibilityCloak**
            - Base64 encoded: Malwarev21
            - ROT13 encoded: Malwarev22
            - Reverse encoded: Malwarev23
            
            **ConfuserEx**
            - Malwarev3
            
            **InvisibilityCloak + ConfuserEx**
            - Base64 encoded: Malwarev41
            - ROT13 encoded: Malwarev42
            - Reverse encoded: Malwarev43
            EOF
            )
    
            assets_dir="/home/runner/work/Rubeus/Rubeus"
            exe_file=$(find "$assets_dir" -name "*.exe" -type f | head -n 1)
            
            if [ -n "$exe_file" ]; then
                gh release create "$RELEASE_TAG" \
                    --title "$RELEASE_NAME" \
                    --notes "$RELEASE_BODY" \
                    --generate-notes \
                    --latest \
                    "$exe_file"
            else
                echo "No .exe file found in the specified directory."
            fi
          continue-on-error: true

        - name: Upload to Beta release 
          if: "${{ github.event.inputs.Malware_release == 'Beta' }}"
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          run: |       
            RELEASE_TAG="Beta"                   
            assets_dir="/home/runner/work/Rubeus/Rubeus"
            exe_file=$(find "$assets_dir" -name "*.exe" -type f | head -n 1)
            
            if [ -n "$exe_file" ]; then
                gh release upload "$RELEASE_TAG" --clobber \
                    "$exe_file"
            else
                echo "No .exe file found in the specified directory."
            fi
          continue-on-error: true
